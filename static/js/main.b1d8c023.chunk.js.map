{"version":3,"sources":["App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","onInputChange","event","value","target","getProvider","connection","Connection","Provider","sendGif","length","provider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","createGifAccount","startStuffOff","systemProgram","programId","signers","account","fetch","useEffect","addEventListener","className","onClick","type","placeholder","onChange","map","item","index","src","gifLink","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1d8c023.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport {\n  Program, Provider, web3\n} from \"@project-serum/anchor\";\n\nimport idl from \"./idl.json\";\nimport kp from \"./keypair.json\";\n\nconst { SystemProgram, Keypair } = web3;\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\nconst programID = new PublicKey(idl.metadata.address);\n\nconst network = clusterApiUrl(\"devnet\");\n\nconst opts = {\n  preflightCommitment: \"processed\",\n}\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  //Function to check if Phantom wallet is connected\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          //The solana object gives a function that will allow us to connect directly with user's wallet\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          //Set the user's publicKey in state to be used later\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No GIF link given!\");\n      return;\n    }\n    console.log(\"GIF link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program.\", inputValue);\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount with address:\", baseAccount.publicKey.toString());\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    }\n    else {\n      return (\n        <div className=\"connected-container\">\n          <input type=\"text\" placeholder=\"Enter GIF link!\" value={inputValue} onChange={onInputChange} />\n          <button className=\"cta-button submit-gif-button\" onClick={sendGif}>Submit</button>\n          <div className=\"gif-grid\">\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} />\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  }\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got the account\", account)\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifs: \", error)\n      setGifList(null);\n    }\n  }\n\n  //When component first mounts, let's check to see if we have a connected Phantom Wallet\n  useEffect(() => {\n    window.addEventListener(\"load\", async (event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">ðŸ–¼ Solana Golden Retriever GIF Portal</p>\n          <p className=\"sub-text\">\n            View your Golden Retriever GIF collection in the metaverse âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by Emma Kwan with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}